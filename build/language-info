#!/usr/bin/env python3
from __future__ import annotations

import argparse
import gzip
import json
import os.path
import shutil
import subprocess
import tarfile
import tempfile

from pre_commit import resources
from pre_commit.languages.all import languages


def reset(tarinfo: tarfile.TarInfo) -> tarfile.TarInfo:
    tarinfo.uid = tarinfo.gid = 0
    tarinfo.uname = tarinfo.gname = 'root'
    tarinfo.mtime = 0
    return tarinfo


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--dest', required=True)

    args = parser.parse_args()

    os.makedirs(args.dest, exist_ok=True)

    data = {
        'languages': {
            k: {
                'default_version': v.get_default_version(),
                'env_dir': v.ENVIRONMENT_DIR,
            }
            for k, v in languages.items()
        },
    }

    info_json = os.path.join(args.dest, 'info.json')
    with open(info_json, 'w') as f:
        json.dump(data, f)

    with tempfile.TemporaryDirectory() as tmpdir:
        resources_dir = os.path.dirname(resources.__file__)
        empty_prefix = 'empty_template_'
        for fname in os.listdir(resources_dir):
            if fname.startswith(empty_prefix):
                dest = os.path.join(tmpdir, fname.removeprefix(empty_prefix))
                shutil.copy(os.path.join(resources_dir, fname), dest)
                os.utime(dest, (0, 0))

        git = ('git', '-C', tmpdir)
        subprocess.check_call((*git, 'init', '.', '--template=', '-qq'))
        subprocess.check_call((*git, 'add', '.'))
        subprocess.check_call(
            (*git, 'commit', '-m', 'init', '-qq'),
            env={
                'GIT_AUTHOR_NAME': 'pre-commit-ci',
                'GIT_AUTHOR_EMAIL': 'pre-commit-ci@example.com',
                'GIT_AUTHOR_DATE': '2022-01-01 00:00:00Z',
                'GIT_COMMITTER_NAME': 'pre-commit-ci',
                'GIT_COMMITTER_EMAIL': 'pre-commit-ci@example.com',
                'GIT_COMMITTER_DATE': '2022-01-01 00:00:00Z',
            },
        )
        subprocess.check_call((*git, 'gc', '--aggressive', '-qq'))
        # this file is not determinstic for some reason...
        # but it seems not needed?
        os.remove(os.path.join(tmpdir, '.git/index'))

        arcs = []
        for root, dirs, filenames in os.walk(tmpdir):
            for filename in dirs + filenames:
                abspath = os.path.abspath(os.path.join(root, filename))
                arcs.append((os.path.relpath(abspath, tmpdir), abspath))
        arcs.sort()

        local_tgz = os.path.join(args.dest, 'local.tgz')
        with gzip.GzipFile(local_tgz, 'wb', mtime=0) as gzipf:
            # https://github.com/python/typeshed/issues/5491
            with tarfile.open(fileobj=gzipf, mode='w') as tf:  # type:ignore
                for arcname, abspath in arcs:
                    tf.add(
                        abspath,
                        arcname=arcname,
                        recursive=False,
                        filter=reset,
                    )

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
